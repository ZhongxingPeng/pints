        for j in range(self._num_chains):



            # Accept/reject
            u = np.log(np.random.rand())
            proposed_log_likelihood = self._log_likelihood(proposed)

            if u < proposed_log_likelihood - current_log_likelihood[j]:
                chains[i, j, :] = proposed
                current_log_likelihood[j] = proposed_log_likelihood
            else:
                chains[i, j, :] = chains[i - 1, j, :]

            # Update CR distribution
            for d in range(0, self._dimension):
                Delta[m] += (chains[i, j, d] - chains[i - 1, j, d])**2 / np.var(chains[:, j, d])
        for k in range(0, self._nCR):
            p[k] = i * self._num_chains * (Delta[k] / float(L[k])) / np.sum(Delta)  # NOQA
        p = p / np.sum(p)
